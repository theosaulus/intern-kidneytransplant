colnames(REJ_CUT) = c("REJ_CUT")
pca = vector(mode = "list", length = 7)
contrib = vector(mode = "list", length = 14)
contrib.names = vector(mode = "list", length = 14)
for (sheet in 1:7){
fit.pca = prcomp(PERCENT_TAB[[sheet]][-which(rownames(PERCENT_TAB[[sheet]]) == "446526"), ],
scale = FALSE)
pca[[sheet]] = fviz_pca_ind(fit.pca,
habillage = as.factor(t(REJ[-which(rownames(PERCENT_TAB[[sheet]]) == "446526"), ])),
addEllipses = TRUE,
label = "none")
contrib[[2*sheet - 1]] =  fviz_contrib(fit.pca,
choice="var",
axes = 1,
top = 7) +
theme(axis.text = element_text(size = 12)) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
coord_flip()
contrib[[2*sheet]] = fviz_contrib(fit.pca,
choice="var",
axes = 2,
top = 7) + theme(axis.text = element_text(size = 12)) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
coord_flip()
contrib.names[[2*sheet - 1]] = contrib.names[[2*sheet]] = SHEETNAMES[[sheet]]
# print(fviz_pca_var(fit.pca, col.var = "contrib", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07")))
}
# png("plots/PCA.png", width = 1000, height = 1600)
ggarrange(plotlist = pca, labels = SHEETNAMES, ncol=2, nrow = 4, label.x = 0.8)
# dev.off()
# png("plots/contribution_to_variance.png", width = 1000, height = 1600)
ggarrange(plotlist = contrib, labels = contrib.names, ncol = 2, nrow = 7, label.x = 0.8)
# dev.off()
pca = vector(mode = "list", length = 7)
fit.pca = prcomp(logratio.transfo(OTU_COUNT),
scale = FALSE)
fviz_pca_ind(fit.pca,
habillage = as.factor(t(REJ)),
addEllipses = TRUE,
label = "none")
dmat.kulczyn = vegdist(OTU_COUNT, method = 'kulczynski')
pheatmap(as.matrix(dmat.kulczyn),
cluster_rows = TRUE,
cluster_cols = TRUE,
fontsize = 6)
fit.hc = hclust(dmat.kulczyn, method="ward.D2")
dend <- as.dendrogram(fit.hc)
groupCodes <- as.vector(t(REJ)) + 1
colorCodes <- c('0'="green", '1'="red")
# Assigning the labels of dendrogram object with new colors:
labels_colors(dend) <- colorCodes[groupCodes][order.dendrogram(dend)]
plot(dend)
dmat.jaccard = vegdist(OTU_COUNT, method = 'jaccard')
pheatmap(as.matrix(dmat.jaccard),
cluster_rows = TRUE,
cluster_cols = TRUE,
fontsize = 6)
fit.hc = hclust(dmat.jaccard, method="ward.D2")
dend <- as.dendrogram(fit.hc)
groupCodes <- as.vector(t(REJ)) + 1
colorCodes <- c('0'="green", '1'="red")
# Assigning the labels of dendrogram object with new colors:
labels_colors(dend) <- colorCodes[groupCodes][order.dendrogram(dend)]
plot(dend)
pval.vec = vector(mode = "list", length = 7)
# padj.vec = vector(mode = list, length = 7)
for (sheet in 1:7){
pval = apply(PERCENT_TAB[[sheet]], 2, function(x) t.test(x~as.matrix(REJ))$p.value)
padj = p.adjust(pval, method = "fdr")
pval.signif = which(pval<0.05)
if (length(pval.signif) == 0){pval.signif = FALSE}
pval.vec[[sheet]] = list(pval.signif, pval[pval.signif])
}
pval.vec
# Wilcoxon non-parametric test
wilc.vec = vector(mode = "list", length = 7)
for (sheet in 1:7){
pval = apply(PERCENT_TAB[[sheet]], 2, function(x) wilcox.test(x~as.matrix(REJ))$p.value)
padj = p.adjust(pval, method = "fdr")
pval.signif = which(pval<0.05)
if (length(pval.signif) == 0){pval.signif = FALSE}
wilc.vec[[sheet]] = list(pval.signif, pval[pval.signif])
}
wilc.vec
PERCENT_TAB.R = vector(mode = "list", length = 7)
PERCENT_TAB.NR = vector(mode = "list", length = 7)
PERCENT_TAB.R.mean = vector(mode = "list", length = 7)
PERCENT_TAB.NR.mean = vector(mode = "list", length = 7)
PERCENT_TAB.diff = vector(mode = "list", length = 7)
boxplot.list = list()
for (sheet in 1:7){
PERCENT_TAB.R[[sheet]]  = PERCENT_TAB[[sheet]][which (REJ=='1'), ]
PERCENT_TAB.NR[[sheet]] = PERCENT_TAB[[sheet]][which (REJ=='0'), ]
PERCENT_TAB.R.mean[[sheet]]  = colMeans(PERCENT_TAB.R[[sheet]])
PERCENT_TAB.NR.mean[[sheet]] = colMeans(PERCENT_TAB.NR[[sheet]])
PERCENT_TAB.diff[[sheet]] = PERCENT_TAB[[sheet]][wilc.vec[[sheet]][[1]]]
if (!(all(wilc.vec[[sheet]][[1]] == FALSE))){
for(variable in colnames(PERCENT_TAB.diff[[sheet]])){
dfboxplot <- ggplot(tibble(x=as.numeric(t(REJ)), y=PERCENT_TAB.diff[[sheet]][, variable]),
aes(x=x, y=y)) +
geom_dotplot(binaxis=PERCENT_TAB.diff[[sheet]][, variable],
stackdir='center',
position=position_dodge(1),
binwidth = 1/30
) +
scale_fill_manual(values=c("1"="green",
"0"="red")) +
labs(title = paste(colnames(PERCENT_TAB[[sheet]][variable]),
"from",
SHEETNAMES[sheet],
"\n difference of average:",
round(abs(PERCENT_TAB.R.mean[[sheet]][variable] - PERCENT_TAB.NR.mean[[sheet]][variable]), digits = 2),
"\n p-value:",
as.numeric(round(wilc.vec[[sheet]][[2]][variable], digits = 2)),
sep = " ")) +
geom_violin(aes(fill = as.factor(t(REJ))))
boxplot.list[[length(boxplot.list) +1]] = dfboxplot
}
}
}
# png(filename = "plots/violin_plots.png", width = 1000, height = 500 * length(boxplot.list) %/% 2)
ggarrange(plotlist = boxplot.list, ncol=2, nrow = length(boxplot.list) %/% 2)
# dev.off()
corrplot.list = vector(mode = "list", length = 7)
for (sheet in 1:7){
if (!(all(wilc.vec[[sheet]][[1]] == FALSE))){
mcor = cor(data.frame(PERCENT_TAB[[sheet]][wilc.vec[[sheet]][[1]]][which (rownames(PERCENT_TAB[[sheet]]) %in% rownames(ELISA)),],
scale(ELISA),
sapply(MERRLIN, function(x) (scale(as.numeric(x)))) ))
corrplot.list[[sheet]] = corrplot(mcor, type = "upper", method = "pie", tl.cex = ) + theme(label.text = element_text(size = 20))
}
}
ggarrange(plotlist = corrplot.list, ncol = 1, nrow = 7)
#CHANGE MAX TEXT LENGTH
# If building a tree without some patients is needed:
# for (patient in rownames(OTU_COUNT)) {
#   if (!(file.exists(paste0("trees/tree_", as.numeric(patient), ".txt")))){
#
#   tree.mat = read_excel(
#     path = "count_table.xlsx",
#     sheet = 1,
#     range = "C2:C550",
#     col_names = TRUE
#   )
#   tree.df = sapply(1:nrow(tree.mat), function(x)
#     strsplit(tree.mat$...1[x], ";")[[1]])
#
#   clusters.mat = read_excel(
#     path = "count_table.xlsx",
#     sheet = 1,
#     range = "A2:A550",
#     col_names = TRUE
#   )
#   clusters.df = as.data.frame(sapply(1:nrow(clusters.mat), function(x)
#     strsplit(clusters.mat$...1[x], ";")[[1]]))
#
#   tree.df = t(tree.df)
#   colnames(tree.df) = c("Domain",
#                         "Phylum",
#                         "Class",
#                         "Order",
#                         "Family",
#                         "Genus",
#                         "Species")
#   colnames(clusters.df) = c("Cluster")
#
#   tree.df = data.frame(tree.df, clusters.df)
#
#   otu.tab.trans = t(OTU_COUNT[which (rownames(OTU_COUNT) %in% rownames(ELISA)),])
#   otu.tab.trans = otu.tab.trans[,-(which (colnames(otu.tab.trans) == patient))]
#   tree.df = tree.df[-(which (rowSums(otu.tab.trans) == 0)),]
#
#   ## Clean the data to build the tree
#   count = 0
#
#   for (i in 1:nrow(tree.df)) {
#     for (j in 1:ncol(tree.df)) {
#       if (tree.df[i, j] == 'Unknown') {
#         tree.df[i, j] = paste('Unknown', as.character(count), sep = "")
#         count = count + 1
#
#       }
#     }
#   }
#
#   tree.df = data.frame(lapply(tree.df, function(x) {
#     gsub("\\(", "", x)
#   }))
#   tree.df = data.frame(lapply(tree.df, function(x) {
#     gsub("\\)", "", x)
#   }))
#   tree.df = data.frame(lapply(tree.df, function(x) {
#     gsub(" ", "_", x)
#   }))
#   tree.df = data.frame(lapply(tree.df, function(x) {
#     gsub("\\.", "", x)
#   }))
#   tree.df = data.frame(lapply(tree.df, function(x) {
#     gsub("\\[", "", x)
#   }))
#   tree.df = data.frame(lapply(tree.df, function(x) {
#     gsub("\\]", "", x)
#   }))
#
#
#   # tree.phylo = toTree(data = tree.df, column_order = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Cluster"))
#
#   # Build the tree
#   tree.df2 = data.frame(tree.df)
#   tree.df2$pathString = paste(
#     tree.df$Domain,
#     tree.df$Phylum,
#     tree.df$Class,
#     tree.df$Order,
#     tree.df$Family,
#     tree.df$Genus,
#     tree.df$Species,
#     tree.df$Cluster,
#     sep = "/"
#   )
#   population = as.Node(tree.df2)
#   # print(population)
#   # class(population)
#
#   # dendro = as.dendrogram(population)
#   # hclust = as.hclust(dendro)
#
#
#
#   phylo = as.phylo(population)
#   ape::write.tree(phylo, file = paste0('trees/tree_', as.numeric(patient), '.txt'))
#   }
# }
phylo = ape::read.tree('trees/tree.txt')
phylo.rooted = root.phylo(phylo,
outgroup = phylo$tip.label,
resolve.root = TRUE)
phylo.midpoint = midpoint(phylo)
tree = phylo.midpoint
# png("plots/tree.png", width = 600, height = 6000)
plot.phylo(tree)
# dev.off()
# Create the tree data frame, needed later for the permutations
tree.mat = read_excel(
path = "count_table.xlsx",
sheet = 1,
range = "C2:C550",
col_names = TRUE
)
tree.df = sapply(1:nrow(tree.mat), function(x)
strsplit(tree.mat$...1[x], ";")[[1]])
clusters.mat = read_excel(
path = "count_table.xlsx",
sheet = 1,
range = "A2:A550",
col_names = TRUE
)
clusters.df = as.data.frame(sapply(1:nrow(clusters.mat), function(x)
strsplit(clusters.mat$...1[x], ";")[[1]]))
tree.df = t(tree.df)
colnames(tree.df) = c("Domain",
"Phylum",
"Class",
"Order",
"Family",
"Genus",
"Species")
colnames(clusters.df) = c("Cluster")
tree.df = data.frame(tree.df, clusters.df)
otu.tab.trans = t(OTU_COUNT[which (rownames(OTU_COUNT) %in% rownames(ELISA)),])
tree.df = tree.df[-(which (rowSums(otu.tab.trans) == 0)),]
# Clean the data to build the tree
count = 0
for (i in 1:nrow(tree.df)) {
for (j in 1:ncol(tree.df)) {
if (tree.df[i, j] == 'Unknown') {
tree.df[i, j] = paste('Unknown', as.character(count), sep = "")
count = count + 1
# tree.df[i, j] = paste0("Unknown", as.character(j))
}
}
}
tree.df = data.frame(lapply(tree.df, function(x) {
gsub("\\(", "", x)
}))
tree.df = data.frame(lapply(tree.df, function(x) {
gsub("\\)", "", x)
}))
tree.df = data.frame(lapply(tree.df, function(x) {
gsub(" ", "_", x)
}))
tree.df = data.frame(lapply(tree.df, function(x) {
gsub("\\.", "", x)
}))
tree.df = data.frame(lapply(tree.df, function(x) {
gsub("\\[", "", x)
}))
tree.df = data.frame(lapply(tree.df, function(x) {
gsub("\\]", "", x)
}))
# Create the phylognetic tree for each level
tree.list = vector(mode = "list", length = 7)
for (level in 1:7) {
if (!(file.exists(paste0("trees/tree_", SHEETNAMES[level], ".txt")))) {
tree.df2 = data.frame(tree.df[, 1:(level + 1)])
if (level == 1) {
tree.df2$pathString = paste(tree.df2$Domain,
tree.df2$Phylum,
sep = "/")
}
if (level == 2) {
tree.df2$pathString = paste(tree.df2$Domain,
tree.df2$Phylum,
tree.df2$Class,
sep = "/")
}
if (level == 3) {
tree.df2$pathString = paste(tree.df2$Domain,
tree.df2$Phylum,
tree.df2$Class,
tree.df2$Order,
sep = "/")
}
if (level == 4) {
tree.df2$pathString = paste(tree.df2$Domain,
tree.df2$Phylum,
tree.df2$Class,
tree.df2$Order,
tree.df2$Family,
sep = "/")
}
if (level == 5) {
tree.df2$pathString = paste(tree.df2$Domain,
tree.df2$Phylum,
tree.df2$Class,
tree.df2$Order,
tree.df2$Family,
tree.df2$Genus,
sep = "/")
}
if (level == 6) {
tree.df2$pathString = paste(tree.df2$Domain,
tree.df2$Phylum,
tree.df2$Class,
tree.df2$Order,
tree.df2$Family,
tree.df2$Genus,
tree.df2$Species,
sep = "/")
}
if (level == 7) {
tree.df2$pathString = paste(tree.df2$Domain,
tree.df2$Phylum,
tree.df2$Class,
tree.df2$Order,
tree.df2$Family,
tree.df2$Genus,
tree.df2$Species,
tree.df2$Cluster,
sep = "/")
}
population = as.Node(tree.df2)
phylo = as.phylo(population)
ape::write.tree(phylo, file = paste0('trees/tree_',
SHEETNAMES[level],
'.txt'))
phylo.rooted = root.phylo(phylo,
outgroup = phylo$tip.label,
resolve.root = TRUE)
phylo.midpoint = midpoint(phylo)
tree.list[[level]] = phylo.midpoint
}
else{
phylo = ape::read.tree(paste0('trees/tree_',
SHEETNAMES[level],
'.txt'))
phylo.rooted = root.phylo(phylo,
outgroup = phylo$tip.label,
resolve.root = TRUE)
phylo.midpoint = midpoint(phylo)
tree.list[[level]] = phylo.midpoint
}
}
for (sheet in 1:7){
png(paste0("plots/tree_", SHEETNAMES[sheet], ".png"),
width = 500 ,
height = floor(length(tree.list[[sheet]]$tip.label)) * 15)
plot.phylo(tree.list[[sheet]])
dev.off()
}
source("UniFrac.r")
install.packages("zCompositions")
source("UniFrac.r")
OTU_TAB = as.data.frame(OTU_COUNT[which(rownames(OTU_COUNT) %in% rownames(ELISA)), ])
OTU_TAB = OTU_TAB[, -(which (colSums(OTU_TAB) == 0))]
taxonomy <- rownames(OTU_TAB)
# Sort taxa from most to least abundant
taxaOrder <- rev(order(apply(OTU_TAB,2,sum)))
taxonomy <- taxonomy[taxaOrder]
OTU_TAB <- OTU_TAB[,taxaOrder]
# Read metadata
MyMetaOrdered <- rownames(OTU_TAB)
MyMetaOrdered <- gsub("_.*$","",MyMetaOrdered)
# Unweighted UniFrac separately with rarefied data
OTU_TAB.rarefy <- rrarefy(OTU_TAB, min(apply(OTU_TAB,1,sum)))
unifracs <- GUniFrac(OTU_TAB.rarefy, tree, alpha = c(1))$unifracs
unweighted <- unifracs[, , "d_UW"]
write.table(unweighted,file="output/unweighted_distance_matrix.txt",sep="\t",quote=FALSE)
install.packages("Rtsne")
library(Rtnse)
library(Rtsne)
tsne_out <- Rtsne(as.matrix(OTU_TAB)) # Run TSNE
tsne_out <- Rtsne(X = as.matrix(OTU_TAB),
perplexity = floor((nrow(data) - 1) / 3),
dims = 2) # Run TSNE
tsne_out <- Rtsne(X = as.matrix(OTU_TAB),
perplexity = floor((nrow(OTU_TAB) - 1) / 3),
dims = 2) # Run TSNE
plot(tsne_out$Y,col=REJ_CUT,asp=1)
plot(tsne_out$Y,col=REJ_CUT.T,asp=1)
plot(tsne_out$Y,col=t(REJ_CUT),asp=1)
plot(tsne_out$Y,col=t(as.matrix(REJ_CUT)),asp=1)
plot(tsne_out$Y,col=t(as.vector(REJ_CUT)),asp=1)
plot(tsne_out$Y,col=as.vector(t(REJ_CUT)),asp=1)
as.vector(t(REJ_CUT))
as.vector(REJ_CUT)
plot(tsne_out$Y,col=as.vector(t(REJ_CUT))= #,asp=1)
plot(tsne_out$Y,col=as.vector(t(REJ_CUT)) #,asp=1)
)
plot(tsne_out$Y,col=as.vector(t(REJ_CUT)) ,asp=1)
plot(tsne_out$Y,col=as.vector(t(REJ_CUT))+1,asp=1)
plot(tsne_out$Y,col=as.vector(t(REJ_CUT))+2,asp=1)
plot(tsne_out$Y,col=as.vector(t(REJ_CUT))+3,asp=1)
plot(tsne_out$Y,col=as.vector(t(REJ_CUT))+4,asp=1)
plot(tsne_out$Y,col=as.vector(t(REJ_CUT))+5,asp=1)
plot(tsne_out$Y,col=as.vector(t(REJ_CUT))+6,asp=1)
tsne_out <- Rtsne(X = as.matrix(OTU_TAB),
perplexity = 30, #floor((nrow(OTU_TAB) - 1) / 3),
dims = 2) # Run TSNE
tsne_out <- Rtsne(X = as.matrix(OTU_TAB),
perplexity = 20, #floor((nrow(OTU_TAB) - 1) / 3),
dims = 2) # Run TSNE
nrow(OTU_TAB) - 1
floor((nrow(OTU_TAB) - 1) / 3)
tsne_out <- Rtsne(X = as.matrix(OTU_TAB),
perplexity = 15, #floor((nrow(OTU_TAB) - 1) / 3),
dims = 2) # Run TSNE
plot(tsne_out$Y,col=as.vector(t(REJ_CUT))+6,asp=1)
tsne_out <- Rtsne(X = as.matrix(OTU_TAB),
perplexity = 12, #floor((nrow(OTU_TAB) - 1) / 3),
dims = 2) # Run TSNE
plot(tsne_out$Y,col=as.vector(t(REJ_CUT))+6,asp=1)
tsne_out <- Rtsne(X = as.matrix(OTU_TAB),
perplexity = 1, #floor((nrow(OTU_TAB) - 1) / 3),
dims = 2) # Run TSNE
plot(tsne_out$Y,col=as.vector(t(REJ_CUT))+6,asp=1)
tsne_out <- Rtsne(X = as.matrix(OTU_TAB),
perplexity = 2, #floor((nrow(OTU_TAB) - 1) / 3),
dims = 2) # Run TSNE
plot(tsne_out$Y,col=as.vector(t(REJ_CUT))+6,asp=1)
tsne_out <- Rtsne(X = as.matrix(OTU_TAB),
perplexity = 1.5, #floor((nrow(OTU_TAB) - 1) / 3),
dims = 2) # Run TSNE
plot(tsne_out$Y,col=as.vector(t(REJ_CUT))+6,asp=1)
tsne_out <- Rtsne(X = as.matrix(OTU_TAB),
perplexity = 19, #floor((nrow(OTU_TAB) - 1) / 3),
dims = 2) # Run TSNE
plot(tsne_out$Y,col=as.vector(t(REJ_CUT))+6,asp=1)
tsne_out <- Rtsne(X = as.matrix(t(OTU_TAB)),
perplexity = 40, #floor((nrow(OTU_TAB) - 1) / 3),
dims = 2) # Run TSNE
tsne_out <- Rtsne(X = as.matrix(PERCENT_TAB),
perplexity = 40, #floor((nrow(OTU_TAB) - 1) / 3),
dims = 2) # Run TSNE
tsne_out <- Rtsne(X = as.matrix(PERCENT_TAB),
perplexity = 19, #floor((nrow(OTU_TAB) - 1) / 3),
dims = 2) # Run TSNE
tsne_out <- Rtsne(X = as.matrix(PERCENT_TAB),
perplexity = 15, #floor((nrow(OTU_TAB) - 1) / 3),
dims = 2) # Run TSNE
tsne_out <- Rtsne(X = as.matrix(PERCENT_TAB),
perplexity = 2, #floor((nrow(OTU_TAB) - 1) / 3),
dims = 2) # Run TSNE
tsne_out <- Rtsne(X = as.matrix(PERCENT_TAB),
perplexity = 3, #floor((nrow(OTU_TAB) - 1) / 3),
dims = 2) # Run TSNE
tsne_out <- Rtsne(X = as.matrix(ELISA),
perplexity = 3, #floor((nrow(OTU_TAB) - 1) / 3),
dims = 2) # Run TSNE
plot(tsne_out$Y,col=as.vector(t(REJ_CUT))+6,asp=1)
tsne_out <- Rtsne(X = as.matrix(ELISA),
perplexity = floor((nrow(X) - 1) / 3),
dims = 2) # Run TSNE
tsne_out <- Rtsne(X = as.matrix(ELISA),
perplexity = floor((nrow(ELISA) - 1) / 3),
dims = 2) # Run TSNE
plot(tsne_out$Y,col=as.vector(t(REJ_CUT))+6,asp=1)
tsne_out <- Rtsne(X = as.matrix(MERRLIN),
perplexity = floor((nrow(MERRLIN) - 1) / 3),
dims = 2) # Run TSNE
tsne_out <- Rtsne(X = as.matrix(OTU_TAB),
perplexity = floor((nrow(OTU_TAB) - 1) / 3),
dims = 2) # Run TSNE
plot(tsne_out$Y,col=as.vector(t(REJ_CUT))+6,asp=1)
tsne_out <- Rtsne(X = as.matrix(OTU_TAB),
perplexity = floor((nrow(OTU_TAB) - 1) / 3),
dims = 2) # Run TSNE
library(Rtsne)
tsne_out <- Rtsne(X = as.matrix(OTU_TAB),
perplexity = floor((nrow(OTU_TAB) - 1) / 3),
dims = 2) # Run TSNE
plot(tsne_out$Y,col=as.vector(t(REJ_CUT))+6,asp=1)
